#!/bin/bash

# Check if at least one argument was provided
if [ $# -eq 0 ]; then
  echo "Please provide at least one file or directory name as a command line argument."
  exit 1
fi

image_name="linux-malware-analysis"
container_name="${image_name}_$(date +%s)"

# Build docker image if it doesn't exist
if [[ "$(docker images -q $image_name 2> /dev/null)" == "" ]]; then
  docker build -t $image_name .
fi

# Run container
container_id=$(docker run -d --network none --name $container_name $image_name sleep infinity)

# Copy each file or directory to the container
for path in "$@"; do
  if [ ! -e "$path" ]; then
    echo "Path $path does not exist."
    docker kill $container_id
    docker rm $container_id
    exit 1
  fi
  # Use Docker cp to copy files and directories
  docker cp "$path" "$container_id:/home/app/$(basename "$path")"
done

json_outputs=()

# Execute commands inside the container using non-interactive mode
docker exec -i "$container_id" bash <<EOF
  # Run the Python script to analyze the files and generate the JSON output
  for file in /home/app/*; do
    if [ -f "\$file" ]; then
      python3 /home/app/analyze_file.py "\$file"
    fi
  done
EOF

for path in "$@"; do
  json_file=$(basename "$path").json
  json_content=$(docker exec -i "$container_id" cat "/home/app/$json_file")
  echo "JSON content for $json_file: $json_content"  # Debug print statement
  json_outputs+=("$json_content")
done

combined_json=$(printf '%s\n' "${json_outputs[@]}" | jq -s '.')

# Execute commands inside the container using non-interactive mode
# for path in "$@"; do
#   json_output=$(docker exec -i "$container_id" python3 /home/app/analyze_file.py "/home/app/$(basename "$path")")
#   json_outputs+=("$json_output")
# done

# Copy the resulting JSON files back to the host
# for path in "$@"; do
#   if [ -f "$path" ]; then
#     docker cp "$container_id:/home/app/$(basename "$path").json" .
#   elif [ -d "$path" ]; then
#     for file in "$path"/*; do
#       docker cp "$container_id:/home/app/$(basename "$path")/$(basename "$file").json" .
#     done
#   fi
# done

# Combine JSON outputs using Python within the host
#combined_json=$(python3 -c "import sys, json; print(json.dumps([json.loads(item) for item in sys.argv[1:]]))" "${json_outputs[@]}")


# After the Docker container has finished running, kill and remove it
docker kill $container_id
docker rm $container_id


# Output the combined JSON results
echo "$combined_json"
