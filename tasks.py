#tasks.py

from kubernetes import client, config
import logging
import psycopg2
import os
import uuid
from .models import FileContent

logger = logging.getLogger(__name__)

def fetch_file_from_db(file_id, output_path):
    conn = psycopg2.connect(
        dbname="binaries",
        user="postgres",
        password=os.getenv('A_PASSWORD'),
        host="localhost",
        port="5432"
    )
    cursor = conn.cursor()
    
    query = "SELECT file_data FROM your_table WHERE file_id = %s"
    cursor.execute(query, (file_id,))
    file_data = cursor.fetchone()[0]
    
    with open(output_path, 'wb') as file:
        file.write(file_data)
    
    cursor.close()
    conn.close()
    print(f"File {file_id} fetched and saved to {output_path}")

def create_job_object(file_name, file_id):
    container = client.V1Container(
        name="file-analyzer",
        image="linux-malware-analysis:latest",
        env=[client.V1EnvVar(name="FILE_NAME", value=file_name),
             client.V1EnvVar(name="FILE_ID", value=file_id)],
        volume_mounts=[client.V1VolumeMount(mount_path="/home/app/input", name="file-volume")]
    )

    template = client.V1PodTemplateSpec(
        metadata=client.V1ObjectMeta(labels={"app": "file-analyzer"}),
        spec=client.V1PodSpec(restart_policy="Never", containers=[container], volumes=[
            client.V1Volume(
                name="file-volume",
                host_path=client.V1HostPathVolumeSource(path="/path/to/your/files")
            )
        ])
    )

    spec = client.V1JobSpec(template=template, backoff_limit=4)

    job = client.V1Job(
        api_version="batch/v1",
        kind="Job",
        metadata=client.V1ObjectMeta(name=f"file-analysis-job-{uuid.uuid4()}"),
        spec=spec
    )

    return job

def create_job(api_instance, job):
    api_response = api_instance.create_namespaced_job(
        body=job,
        namespace="default")
    print("Job created. status='%s'" % str(api_response.status))

def main(file_id):
    # Load the Kubernetes configuration
    config.load_kube_config()
    batch_v1 = client.BatchV1Api()

    file_name = f"/path/to/your/files/{file_id}"
    fetch_file_from_db(file_id, file_name)

    job = create_job_object(file_name, file_id)
    create_job(batch_v1, job)

if __name__ == '__main__':
    file_id = "your_file_id"  # Replace with the actual file ID
    main(file_id)
