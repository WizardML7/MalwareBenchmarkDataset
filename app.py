#app.py

from flask import Flask
import os
from .extensions import db, login_manager
from .views import main

def create_app():
    app = Flask(__name__)
    app.secret_key = 'supersecretkey'

    app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('SQLALCHEMY_DATABASE_URI')
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

    db.init_app(app)

    login_manager.init_app(app)
    login_manager.login_view = 'main.login'

    with app.app_context():
        db.create_all()
        

    app.register_blueprint(main)

    return app

app = create_app()

if __name__ == '__main__':
    app.run(debug=True)




# import json
# import subprocess
# from flask import Flask, jsonify, request, redirect, url_for, render_template, send_file, flash
# from flask_sqlalchemy import SQLAlchemy
# from werkzeug.utils import secure_filename
# from werkzeug.security import generate_password_hash, check_password_hash
# from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
# import os
# from io import BytesIO
# from celery import Celery
# from kubernetes import client, config
# from celery.result import AsyncResult
# # from .celery_tasks import analyze_file_task

# app = Flask(__name__)
# app.secret_key = 'supersecretkey'

# # Database configuration
# app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('SQLALCHEMY_DATABASE_URI')
# app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# db = SQLAlchemy(app)

# # app.config.update(
# #     CELERY_BROKER_URL='redis://172.17.0.2:6379/0',
# #     CELERY_RESULT_BACKEND='redis://172.17.0.2:6379/0',
# #     CELERY_INCLUDE=['app.tasks']
# # )

# # celery = Celery(app.name, broker=app.config['CELERY_BROKER_URL'])
# # celery.conf.update(app.config)

# # Initialize LoginManager
# login_manager = LoginManager()
# login_manager.init_app(app)
# login_manager.login_view = 'login'

# class User(UserMixin, db.Model):
#     id = db.Column(db.Integer, primary_key=True)
#     username = db.Column(db.String(150), unique=True, nullable=False)
#     email = db.Column(db.String(150), unique=True, nullable=False)
#     password = db.Column(db.String(150), nullable=False)

# class FileContent(db.Model):
#     __tablename__ = 'file_content'
#     id = db.Column(db.Integer, primary_key=True)
#     filename = db.Column(db.String(255), nullable=False)
#     data = db.Column(db.LargeBinary, nullable=False)

# with app.app_context():
#     db.create_all()

# config.load_kube_config()

# from tasks import analyze_file_task

# @login_manager.user_loader
# def load_user(user_id):
#     return User.query.get(int(user_id))

# @app.route('/register', methods=['GET', 'POST'])
# def register():
#     if request.method == 'POST':
#         username = request.form.get('username')
#         email = request.form.get('email')
#         password = request.form.get('password')
#         hashed_password = generate_password_hash(password, method='pbkdf2:sha256')

#         new_user = User(username=username, email=email, password=hashed_password)
#         db.session.add(new_user)
#         db.session.commit()

#         flash('Account created successfully!', 'success')
#         return redirect(url_for('login'))
#     return render_template('register.html')

# @app.route('/login', methods=['GET', 'POST'])
# def login():
#     if request.method == 'POST':
#         email = request.form.get('email')
#         password = request.form.get('password')
#         user = User.query.filter_by(email=email).first()

#         if user and check_password_hash(user.password, password):
#             login_user(user)
#             return redirect(url_for('index'))
#         else:
#             flash('Login failed. Check your credentials and try again.', 'danger')
#     return render_template('login.html')

# @app.route('/logout')
# @login_required
# def logout():
#     logout_user()
#     return redirect(url_for('index'))

# @app.route('/')
# def index():
#     return render_template('index.html')

# @app.route('/about')
# def about():
#     return render_template('about.html')

# @app.route('/upload', methods=['GET', 'POST'])
# @login_required
# def upload():
#     if request.method == 'POST':
#         if 'file' not in request.files:
#             flash('No file part')
#             return redirect(request.url)
#         file = request.files['file']
#         if file.filename == '':
#             flash('No selected file')
#             return redirect(request.url)
#         if file:
#             filename = secure_filename(file.filename)
#             new_file = FileContent(filename=filename, data=file.read())
#             db.session.add(new_file)
#             db.session.commit()
#             task = analyze_file_task.delay(new_file.id)  # Queue the task
#             flash('File successfully uploaded and queued for analysis')
#             return jsonify({'task_id': task.id}), 202
#     return render_template('upload.html')

# @app.route('/status/<task_id>', methods=['GET'])
# @login_required
# def task_status(task_id):
#     result = AsyncResult(task_id)
#     response = {
#         'task_id': task_id,
#         'task_status': result.status,
#         'task_result': result.result if result.ready() else None
#     }
#     return jsonify(response)

# @app.route('/download', methods=['GET', 'POST'])
# @login_required
# def download():
#     if request.method == 'POST':
#         search = request.form.get('search')
#         files = FileContent.query.filter(FileContent.filename.contains(search)).all()
#     else:
#         files = FileContent.query.all()
#     return render_template('download.html', files=files)

# @app.route('/download/<int:file_id>')
# @login_required
# def download_file(file_id):
#     file_data = FileContent.query.get(file_id)
#     return send_file(BytesIO(file_data.data), download_name=file_data.filename, as_attachment=True)

# if __name__ == '__main__':
#     db.create_all()  # Create tables
#     app.run(debug=True)
